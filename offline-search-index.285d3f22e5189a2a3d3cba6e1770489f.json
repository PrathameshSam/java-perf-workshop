








[{"body":"Java Flight Recorder The Java Flight Recorder (JFR) is a very low overhead profiling and diagnostics tool. It was inherited from the JRockit JVM, and it is now offered as part of the HotSpot JVM. It is designed to be “black box” data recorder of the the run-time, which can be used in production environments, making it an attractive tool for profiling code since it has low overhead on the JVM.\nTo enable the Flight Recorder on the JVM, the following options need to be included on the JVM:\n-XX:+UnlockCommercialFeatures -XX:+FlightRecorder :heavy_exclamation_mark: Notice that you have to include -XX:+UnlockCommercialFeatures first in the options listing. This is because using Flight Recorder is a feature that requires additional licensing when used in production environments. One of the following licenses is required in order to utilize this in a production environment.\n Oracle Java SE Advanced Oracle Java SE Suite  However, you may use this in non-production environments without additional licensing.\nHigher Fidelity on Method Profiling To get better fidelity on method profiling, include the following options which will enable the compiler to include additional metadata on non-safe code points. This is helpful, as sometimes the metadata will not fully resolve to the correct line in the code.\n-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints Java Mission Control We will be using Java Mission Control (included in Oracle JDK 7u40) to monitor and evaluate the Java flight recordings. To start up Java Mission Control, simply executing the following in your console:\njmc :bulb: In order to be able to invoke jmc (Java Mission Control) from your console, it assumes $JAVA_HOME/bin is on your $PATH. If it is not included, go ahead and update your profile to include this so you can easily invoke jmc from your terminal.\nStart Service with JFR Let’s start profiling our service. Start the service up by enabling JFR:\nStart from the console # Note, if you are running this server from a different folder, consider changing the SERVER_HOME SERVER_HOME=java-perf-workshop-server/target java -XX:+UnlockCommercialFeatures -XX:+FlightRecorder -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints -jar $SERVER_HOME/java-perf-workshop-server-1.1.0-SNAPSHOT.jar server server.yml :bulb: Starting with Java Mission Control 5.5 (included in Oracle Java 8u40), you no longer have to enable JFR prior to capturing the recording (it will dynamically enable it, after prompting about it).\nStart Flight Recording from JMC From Java Mission Control (JMC), you can start a flight recording by right-clicking the JVM from the JVM Browser view and selecting Start Flight Recording…\nThis will open a window where you apply some settings for the recording. First select that you want this to be a Continuous recording and for Event settings, we will import a template to get some consistent settings for profiling. Within the Template Manager, select Import Files… and import the profile.jfc included in this folder. It should appear as Java Performance Workshop Profile. Select this as the Event Settings and then click on Finish.\nOnce your flight recording is being captured in a Continuous recording, it will show a ∞.\n:bulb: You can see the JFR templates (continuous / profile) which are shipped as part of the JRE in: $JAVA_HOME/jre/lib/jfr. These become helpful if you are wanting to compare your settings to some of the standard ones.\nGenerate HTTP traffic on service We will want to generate some traffic on the service to measure some general characteristics of the service:\n Throughput (requests per second) Response time Trend of response time over time  By generating traffic on service, this gives us baseline activity in the JVM to start evaluating the flight recording. For the purpose of this workshop, we will utilize Apache Benchmark to generate traffic on the service.\nBasic test This service under test, is a simple web service which provides results based on a search API. When interacting with the service, you can simply supply a HTTP GET on the search resource with a query parameter (‘q’) with the term that you are searching for. It will then return KCDC’s 2015 sessions that contain that term. Example:\ncurl \"http://localhost:8080/search?q=jvm\" { \"results\" : [ { \"title\" : \"Concurrency Options on the JVM\", \"presenter\" : \"Jessica Kerr\", \"sessionType\" : \"Regular Session\" }, { \"title\" : \"Exploring the Actor Model with Akka.NET\", \"presenter\" : \"Robert Macdonald Smith\", \"sessionType\" : \"Regular Session\" }, { \"title\" : \"What's in your JVM?\", \"presenter\" : \"Carl Chesser\", \"sessionType\" : \"4-Hour Workshop\" } ] } Using Apache Benchmark From the console, we will execute the following to generate traffic against our service. Note, we will use a very basic search of just “a”, since this will generate more results.\nab -n 1000 -c 15 \"http://localhost:8080/search?q=a\" Using loadtest An alternative to Apache Benchmark, is loadtest (a node.js equivalent). To install:\nsudo npm install -g loadtest Then you can execute similarly:\nloadtest -n 1000 -c 15 \"http://localhost:8080/search?q=a\" Using gatling Alternatively, you can use gatling (a performance library with a scala dsl ).\nThis should launch the WorkshopSimulation.\nmvn -f java-perf-workshop-tester/ gatling:test mvn gatling:test Sample output while running:\n[~/java-perf-workshop/java-perf-workshop-tester]$ mvn gatling:test [INFO] Scanning for projects... [INFO] [INFO] ------------------------------------------------------------------------ [INFO] Building java-perf-workshop-tester 1.1.0-SNAPSHOT [INFO] ------------------------------------------------------------------------ [INFO] [INFO] --- gatling-maven-plugin:2.2.4:test (default-cli) @ java-perf-workshop-tester --- 19:12:16,662 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml] 19:12:16,663 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy] 19:12:16,663 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback.xml] at [file:/J:/Workspaces/java-perf-workshop/java-perf-workshop-tester/target/test-classes/logback.xml] 19:12:16,663 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback.xml] occurs multiple times on the classpath. 19:12:16,663 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback.xml] occurs at [file:/J:/Workspaces/java-perf-workshop/java-perf-workshop-tester/target/test-classes/logback.xml] 19:12:16,663 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback.xml] occurs at [jar:file:/C:/Users/JMonterrubio/.m2/repository/io/gatling/gatling-maven-plugin/2.2.4/gatling-maven-plugin-2.2.4.jar!/logback.xml] 19:12:16,727 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set 19:12:16,731 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender] 19:12:16,737 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [CONSOLE] 19:12:16,742 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property 19:12:16,781 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to WARN 19:12:16,782 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [CONSOLE] to Logger[ROOT] 19:12:16,782 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration. 19:12:16,783 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@7a0ac6e3 - Registering current configuration as safe fallback point Simulation cchesser.javaperf.workshop.WorkshopSimulation started... Stop Flight Recorder After you have played traffic through the service, you can then stop your flight recording from JMC.\nThen dump the whole recording.\nThe Flight Recording From a Java Flight Recording, there are several categories of information you can view from JMC:\n Memory: View memory utilization and garbage collection costs. Code: View profiling of your code to identify hot spots in your code base. Also, you can get additional insight to exceptions thrown, compilation costs, and class loading. Threads: View series of thread dumps, hot threads, latency events, and locking situations causing contention. I/O: View general I/O (file / network) costs that were occurring within your code. System: Get a general context of the run-time environment of the JVM. Events: View a full detailed log of the events within the JVM.  Code Our first walkthrough of the Flight Recording will begin with the Code view to give context of where we might be spending time with our code.\nWhen you first open the Code tab, you will be brought to the Overview sub tab. This will give you a breakdown of where you are spending your time by code package and classes.\nTo go deeper into these details, go into the Hot Methods sub tab. From here you can expand down to the method which is consuming most of your time.\nYou can also zoom into the timeline to scope it to a spike of events. This can be done on most view in Java Mission Control. In this case, we will zoom into a 847 ms interval:\nAnother helpful means of identify within a method is including the line number. This can be accomplished by right-clicking in the view and going to Distinguish Frames By, and then selecting Line Number.\n:bulb: Generally, you don’t need this, as it can be quite apparent by the base method being invoked where the cost is at. Though, it may be helpful to include in some contexts.\nWalk around to look at other areas where you are spending time in your code. In many cases you find that there are very expensive areas of code that you cannot change (as you may not own it), but you can dictate whether or not it should be executed (or executed as frequently.\nWe will go into more of the different areas of the flight recording in the next lab.\n","categories":"","description":"Introduction into Java Mission Control with Flight Recorder\n","excerpt":"Introduction into Java Mission Control with Flight Recorder\n","ref":"/docs/jmc/_intro/","tags":"","title":"Introduction"},{"body":"In this workshop, we are going to do some analysis of the JVM’s heap dump.\nPrerequisites  Java Mission Control (Oracle Java 7u40+) Eclipse Memory Analyzer  Capture a Heap Dump You may be aware by now, there are many different ways of getting data from the JVM. Here are just a few ways to get heap dump of the JVM.\njcmd With jcmd, you have the ability to invoke the GC.heap_dump command. This requires that you are running as the same OS user as the target JVM process.\njcmd \u003cPID\u003e GC.heap_dump my_little_heap_dump.hprof Note: If a full path is not specified, the heap_dump will be created relative to the location from where the process was started (when generated with jcmd)\njmap A more traditional approach is using jmap and invoking the command on the target process.\njmap -dump:format=b,file=my_little_heap_dump.hprof \u003cPID\u003e Core Dump You can also use jmap to extract a heap dump from a core dump on the process:\nsudo gdb --pid=\u003cPID\u003e gcore /tmp/jvm.core detach quit jmap -dump:format=b,file=my_little_heap_dump.hprof /usr/bin/java /tmp/jvm.core :bulb: Capturing a heap dump from a core dump on Java 8, you may run into this issue: JDK-8073606.\nHotSpot Diagnostic MBean You can capture a heap dump by invoking a diagnostic MBean which is included in the Oracle JDK. You can do so by opening your favorite MBean browser (ex. jconsole, jmc) and invoke the com.sun.management.HotSpotDiagnostic. The arguments are:\n Filename of the heap dump that will be created. :bulb: Note, it will be created with file ownership of the hosting JVM process. Indicator to dump all live object (true will dump only live objects)  Analyze the Heap Dump As we had in capturing a heap dump, there are many different tools at looking at a heap dump. We will go through three common tools in which we can do some analysis of a heap dump. All of which are free. :smiley:\nVisualVM VisualVM is a tool which is part of Oracle’s JDK (has been since Java 6). This tool was spawned from the Netbeans Profiler, and it has some helpful tools to inspect a heap dump.\nTo load the heap dump in VisualVM, you will just go to File -\u003e Load… and specify the File Format to be Heap Dumps…. Once it is loaded, a view will then be presented with the following sections:\n Summary Classes Instances OQL Console  For the purpose of the workshop we are only going to utilize the OQL Console to construct queries on the heap. There are other options in VisualVM which can give you context about your heap, but I feel there are other better tools we will touch on later. The attractive feature I like with VisualVM is that its OQL Console allows you to write Javascript code to query objects, which you can then do other functions on that data.\nOQL Console From the OQL Console, we will issue queries and then allow you to further play around with the language.\nQuery for Thread objects which are daemons (you can get context of Threads, since they are objects in your heap too):\nselect t from java.lang.Thread t where t.daemon == true These basic results which are returned, are essentially hyperlinks, that you can then click and begin diving into the instance state.\nQuery for Thread objects (similar to last query), but return multiple attributes as JSON:\nselect {name: t.name.toString(), thread_id: t.tid } from java.lang.Thread t where t.daemon == true Query which includes a Javascript function to filter results by looking at all the ConferenceSession objects, and only report the ones which have tags.\nfunction hasTags(conf) { return conf.tags.size \u003e 0 } filter(heap.objects('cchesser.javaperf.workshop.data.ConferenceSession'), hasTags) Take that previous query and further expand it to list it in JSON with the number of tags:\nfunction hasTags(conf) { return conf.tags.size \u003e 0 } map(filter(heap.objects('cchesser.javaperf.workshop.data.ConferenceSession'), hasTags), '{ conference: it, tags: it.tags.size }') We can further expand this to sort the results, descending by number of tags, and list the tags in the results:\nfunction hasTags(conf) { return conf.tags.size \u003e 0 } sort(map(filter(heap.objects('cchesser.javaperf.workshop.data.ConferenceSession'), hasTags), '{ conference: it, tag_count: it.tags.size, tags: toArray(it.tags.elementData) }'), 'rhs.tag_count - lhs.tag_count') Reference: VisualVM OQL Help\n:bulb: Note, the OQL which you use between this tool (and others), isn’t necessarily standard, and therefore cannot be used between tooling without issues. VisualVM gives you the ability to leverage Javascript, which is unique to other tools supporting heap dump analysis.\nJava Mission Control: JOverflow Plugin With Java Mission Control, there is an ability to add plugins, one of which, is the JOverflow plugin. You can install it by going to Help and select Install New Software…, and then select the JOverflow Heap Analyzer.\nOnce this is installed, when you open a .hprof file, JOverflow will be loaded. Also, it add a context menu selection to Dump Heap of JVMs from the JVM Browser.\nWhen you open a heap dump, an initial analysis is completed which lists a large range of anti-patterns and things that can be improved in relation to the memory you utilize.\nAnti-patterns Here is a listing of some the patterns that JOverflow identifies:\n Empty Unused Collections: Empty collection, where modification count == 0. Empty Used Collections: Empty collection, where modification count != 0. Small Sparse: Only for array-based, where less than half the slots are occupied. Small is considered: size \u003c= default (ex. 16 for HashMap). Large Sparse: Only for array-based, where less than half the slots are occupied. Large is considered: Size \u003e default. Boxed: Contains boxed Numbers (ex. java.lang.Integer). Each of these boxed number has overhead as compared to their primitive counterpart due to object references. Small Collections: Collections with 1 to 4 elements. There are fixed costs of collections, which may lend this set of data better hosted in an array vs. a full Java collection type. Vertical Bar Collections: Collection which is a list of lists, where the outer collection is large, and it’s elements are all small collections (ex. List(1000) of List(100)) Zero Size Arrays: Array where length == 0 (still consumers 12 - 16 bytes). Vertical Bar Arrays: Similar to Vertical Bar Collections, but for arrays. Sparse Arrays: Less than half of the elements are not null. Long Zero Tail Arrays: Ends with a consecutive series of zeros, where the tail length is \u003e= size / 2. Empty Arrays: Only null elements. Duplicate Arrays: Where an array contents are the same in another instance, but they are separate array instances. Duplicate Strings: Same as Duplicate Array, where string1.equals(string2) and string1 != string2.  Reference: JOverflow: Advanced Heap Analysis in Java Mission Control\nFiltering As you play with JOverflow, once you click on something, it will begin filtering down your content. If you wish to reduce down to code that you may own, you can start doing a package filter on the ancestor section. In this example, I want to see duplicate strings for code under cchesser. In this case, I can see that our workshop service has several duplicate strings (as this content is replicated on each object):\n Regular Session 4-Hour Workshop 8-Hour Workshop  However, the number of instances / overhead is extremely low (since this is a small service), it gives you visibility of areas that you could optimize.\nEclipse Memory Analyzer Eclipse Memory Analyzer is a fairly mature tool on analyzing heap dumps. It is a rich tool that includes the abilities to do OQL queries on the heap, general reporting on anti-patterns, and helpful common views (like the dominator tree). Eclipse Memory Analyzer tool is a separate install which can be a standalone install, or it can run as a plugin within Eclipse. First, install the tool if you haven’t already via their downloads page.\nAfter you have it installed, go to File and then Open Heap Dump… and specify the hprof file that you wish to analyze.\n:bulb: When Eclipse Memory Analyzer loads your hprof file, it will create many other index files to assist in optimally analyzing and navigating through your heap dump. It may make it easier to isolate your prof file in its own directory prior to opening it, based on the secondary files which are created. You can always just delete these files within Eclipse Memory Analyzer by opening the Heap Dump History window, right-clicking the hprof which was previously loaded, and selecting Delete Index Files. Example listing of index files which get generated by suffix:\n .domIn.index .domOut.index .index .o2ret.index .a2s.index .idx.index .inbound.index .o2c.index .o2hprof.index .outbound.index .threads  Dominator Tree A common first area to look at your heap within Eclipse Memory Analyzer is the dominator tree. From the dominator tree, you can organize by the retained heap size, and then begin drilling down the tree to see the contributors to the largest GC roots.\nHistogram The histogram gives you a quick listing of all the top consumers by type. Typically this is going to provide context of the large consumers based on their “lower-level” types. For example, char[] is a common large contributor, which then will be followed by String which is a type that is predominately weighted by the size of the char[].\nThread Overview The thread overview is a helpful view when you are looking at contributors based on the execution of code. For example, if you have a JVM which has thrown an OutOfMemoryError, you can tell if some type of request caused a massive spike which caused the exhaustion of memory, or if the requests may have not been abnormal, there just wasn’t sufficient space to support the request.\nOQL Another strong feature of Eclipse Memory Analyzer is the OQL studio to execute queries to do lookup on objects in your heap.\nLookup our ConferenceSession class type:\nSELECT * FROM INSTANCEOF cchesser.javaperf.workshop.data.ConferenceSession :bulb: To execute the query, you click on the red exclamation mark (:exclamation:). Alternatively, you can press CTRL+Enter on Windows or Command+Enter on macOS.\nBy returning the raw type back, you can expand each one to further look at the contents of the object. If you wanted to just report the object with its title attribute and the object’s retained sized, you could do this:\nSELECT c.title.toString(), c.@retainedHeapSize FROM INSTANCEOF cchesser.javaperf.workshop.data.ConferenceSession c Now, you could then filter this by including a WHERE clause, where you can filter it by the title or the abstract:\nSELECT c.title.toString(), c.@retainedHeapSize FROM INSTANCEOF cchesser.javaperf.workshop.data.ConferenceSession c WHERE c.title.toString() LIKE \".*(J|j)ava.*\" OR c.abstract.toString() LIKE \".*(J|j)ava.*\" Reference: Eclipse Memory Analyzer OQL Syntax\n","categories":"","description":"Analyzing the heap of the JVM.","excerpt":"Analyzing the heap of the JVM.","ref":"/docs/memory/heap/","tags":"","title":"Memory Heap Analysis"},{"body":"This first part of the workshop, we will begin to learn about looking at the JVM from its native perspective, and begin obtaining JVM based information to correlate to it’s native representation.\ntop A very common utility as to monitor processes in Linux. For our case, we will want to monitor our JVM process. When just executing top, you will see all processes on the host:\ntop - 05:32:51 up 8 min, 1 user, load average: 0.05, 0.12, 0.06\rTasks: 62 total, 1 running, 61 sleeping, 0 stopped, 0 zombie\rCpu(s): 11.2%us, 0.7%sy, 0.0%ni, 87.8%id, 0.0%wa, 0.0%hi, 0.0%si, 0.3%st\rMem: 1020184k total, 466284k used, 553900k free, 17740k buffers\rSwap: 0k total, 0k used, 0k free, 289500k cached\rPID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND\r6730 ec2-user 20 0 2246m 108m 13m S 10.3 10.9 0:14.11 java\r1 root 20 0 19596 1616 1292 S 0.0 0.2 0:00.56 init\r2 root 20 0 0 0 0 S 0.0 0.0 0:00.00 kthreadd\r3 root 20 0 0 0 0 S 0.0 0.0 0:00.02 ksoftirqd/0\r4 root 20 0 0 0 0 S 0.0 0.0 0:00.00 kworker/0:0\r5 root 0 -20 0 0 0 S 0.0 0.0 0:00.00 kworker/0:0H\r6 root 20 0 0 0 0 S 0.0 0.0 0:00.04 kworker/u30:0\r7 root 20 0 0 0 0 S 0.0 0.0 0:00.27 rcu_sched\r8 root 20 0 0 0 0 S 0.0 0.0 0:00.00 rcu_bh\r9 root RT 0 0 0 0 S 0.0 0.0 0:00.00 migration/0\rYou can switch in this view to also view the native threads, by hitting Shift+H.\ntop - 05:34:15 up 9 min, 1 user, load average: 0.01, 0.09, 0.05\rTasks: 101 total, 1 running, 100 sleeping, 0 stopped, 0 zombie\rCpu(s): 4.0%us, 0.3%sy, 0.0%ni, 95.7%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%st\rMem: 1020184k total, 491176k used, 529008k free, 17804k buffers\rSwap: 0k total, 0k used, 0k free, 312648k cached\rShow threads On\rPID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND\r6736 ec2-user 20 0 2246m 109m 13m S 2.0 11.0 0:05.72 java\r6737 ec2-user 20 0 2246m 109m 13m S 0.3 11.0 0:01.69 java\r6740 ec2-user 20 0 2246m 109m 13m S 0.3 11.0 0:01.67 java\r6746 ec2-user 20 0 2246m 109m 13m S 0.3 11.0 0:00.31 java\r6768 ec2-user 20 0 2246m 109m 13m S 0.3 11.0 0:00.03 java\r6778 ec2-user 20 0 2246m 109m 13m S 0.3 11.0 0:00.08 java\r6777 ec2-user 20 0 15224 1332 1032 R 0.3 0.1 0:00.04 top\r1 root 20 0 19596 1616 1292 S 0.0 0.2 0:00.56 init\r2 root 20 0 0 0 0 S 0.0 0.0 0:00.00 kthreadd\r3 root 20 0 0 0 0 S 0.0 0.0 0:00.02 ksoftirqd/0\r4 root 20 0 0 0 0 S 0.0 0.0 0:00.00 kworker/0:0\rWith these native threads, you can now get better context of what resources are being utilized. To simplify this, you can target top to just watch one parent process and then show threads via:\ntop -H -p \u003cPID\u003e In our earlier example, our PID was 6730. Therefore, this would produce:\n$ top -H -p 6730\rtop - 05:38:05 up 13 min, 1 user, load average: 0.00, 0.05, 0.05\rTasks: 32 total, 0 running, 32 sleeping, 0 stopped, 0 zombie\rCpu(s): 0.0%us, 0.0%sy, 0.0%ni,100.0%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%st\rMem: 1020184k total, 515940k used, 504244k free, 17932k buffers\rSwap: 0k total, 0k used, 0k free, 336520k cached\rPID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND\r6739 ec2-user 20 0 2246m 110m 13m S 0.3 11.1 0:00.24 java\r6730 ec2-user 20 0 2246m 110m 13m S 0.0 11.1 0:00.00 java\r6731 ec2-user 20 0 2246m 110m 13m S 0.0 11.1 0:01.50 java\r6732 ec2-user 20 0 2246m 110m 13m S 0.0 11.1 0:01.07 java\r6733 ec2-user 20 0 2246m 110m 13m S 0.0 11.1 0:00.00 java\r6734 ec2-user 20 0 2246m 110m 13m S 0.0 11.1 0:00.00 java\r6735 ec2-user 20 0 2246m 110m 13m S 0.0 11.1 0:00.00 java\r6736 ec2-user 20 0 2246m 110m 13m S 0.0 11.1 0:07.33 java\r6737 ec2-user 20 0 2246m 110m 13m S 0.0 11.1 0:01.69 java\r6738 ec2-user 20 0 2246m 110m 13m S 0.0 11.1 0:00.00 java\rTo make a simple standard capture of native threads for diagnostic purposes, you can do the following:\ntop -b -n3 -H -p \u003cPID\u003e This will capture thread iterations of top by capturing threads of the parent process ID. You can then pipe it to a file.\nExample:\ntop -b -n3 -H -p 6730 \u003e jvm_native_threads.log Thread Dump To capture a thread dump of the JVM, there are many tools that can achieve this. You can do this over JMX remotely, sending an OS signal (kill -3), or just form the command line (jstack or jcmd). To keep it simple, we will just use jcmd as we will use it later for other diagnostic commands.\njcmd \u003cPID\u003e Thread.print :bulb: You need to be the same OS user when invoking the command as the target JVM.\nSo, using our earlier example, this would be:\njcmd 6730 Thread.print However, correlating a thread dump to the native thread state requires a minor translation. In your thread dump, the native thread identifier is in hexadecimal, while the native thread identifiers from top are in decimal. Therefore, if you notice a thread spiking in the top view, you would then want to understand what cod it is correlating to. You can do this simply from the command line via:\nprintf \"%x\\n\" \u003cDecimal Thread ID\u003e Example:\n$ printf \"%x\\n\" 6736 1a50 $ I can then cross reference this thread to my thread dump via the nid (native thread ID) field:\n\"C2 CompilerThread0\" #5 daemon prio=9 os_prio=0 tid=0x00007efda40d4000 nid=0x1a50 waiting on condition [0x0000000000000000]\rjava.lang.Thread.State: RUNNABLE\rAn alternative tool fastthread.io also has a blog on other ways to capture a thread dump\njcmd PerfCounter A very simple and quick collection of stats on a JVM can be collected via:\njcmd \u003cPID\u003e PerfCounter.print Generally the information in this file may or may not indicate the actual problem, but can provide more context in a concise text file of what all has occurred in the life of that JVM. One simple set of counters related to threads are:\njava.threads.daemon=20\rjava.threads.live=26\rjava.threads.livePeak=38\rjava.threads.started=697\rstrace In some rare cases, you may need to figure out what system calls your JVM is doing. One way to do this on several flavors of Linux, is to use strace.\nstrace -f -v -p \u003cPID\u003e Example:\nstrace -f -v -p 6730 Example output:\n[pid 6741] futex(0x7efda4587228, FUTEX_WAKE_PRIVATE, 1 \u003cunfinished ...\u003e\r[pid 6740] write(1, \"DEBUG [2015-06-24 05:50:34,727] \"..., 168 \u003cunfinished ...\u003e\r[pid 6830] gettimeofday( \u003cunfinished ...\u003e\rFrom the write call, we can see it is tied to the thread ID 6740. If we translate it to x1a54, which is then tied to this logging thread in the JVM.\n\"AsyncAppender-Worker-Thread-1\" #9 daemon prio=5 os_prio=0 tid=0x00007efda44d1800 nid=0x1a54 waiting on condition [0x00007efd941f0000]\rjava.lang.Thread.State: WAITING (parking)\rat sun.misc.Unsafe.park(Native Method)\r- parking to wait for \u003c0x00000000f5d38d20\u003e (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\rat java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\rat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\rYou will notice that the system calls are quite noisy with the JVM, but this type of troubleshooting can greatly help when the JVM is getting “hung” or hitting limits by the OS and it isn’t clear from the exception that you are seeing what it is getting restricted on.\n","categories":"","description":"Initial look at the JVM from its native perspective.\n","excerpt":"Initial look at the JVM from its native perspective.\n","ref":"/docs/intro/","tags":"","title":"Process and Threads"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/","tags":"","title":"Workshop"},{"body":"In this workshop we are going to expand what we profiled earlier to all the different areas of the JVM. The JFR has an extensive amount of data which it captures, we will not dive into each of these areas, but hit on a couple more common areas to inspect on your code base.\nExceptions Go into the Code tab, and then navigate to the Exceptions sub tab. Here you can get context of what exceptions are thrown, and when. Exceptions are not necessarily a cheap operation, as there are costs in producing the stack trace.\nWithin this view, there are three sub tabs:\n Overview: Get counts on exceptions/errors and related stack traces Exceptions: Get individual instances of exceptions thrown based on the timeline. Includes string messages which may provide additional context. Errors: Same content as the Exceptions view, but for Errors.  Overview:\nExceptions sub view (filtered down to a specific time interval):\nFollow-ups  What are the exceptions that are getting generated the most? What stack traces are the contributor? Select different intervals of time to filter the listing of what is being presented. Can you see where  Threads In the Threads tab, you can get context to compute and latency events tied to threads. For this we will look a couple of things:\n Hot Threads Latencies  The Hot Thread sub tab view, you can view threads and the related methods that are consuming the most time. As with other views, you can zoom in on spikes of events to see if there is a common effect. Many times this gives you a better context of related resources (by threads of the same pool) that could be getting heavily utilized by a request. This also helps in correlating other facts you may have (like native threads / thread dumps).\nThe Latencies sub tab can help show common areas of your code (organized by thread states) which can cause slowness in your code base that may not be directly tied to a heavy computation task (ex. waiting on a network call). Generally it helps to look at the large contributor (based on total time consumed) and see when and why it is getting invoked (and if that can be minimized).\nFollow-ups  Where are we spending most of our time sleeping? What is causing this?  I/O The I/O tab, can provide context of what external resources you are utilizing from you code base, and relate it to other latency events. For the purpose of our workshop service, we are doing network I/O, and therefore will look at the Socket Read sub view. From this view you can gain context of what host you are calling, how many times you are calling it, and how much time it is taking.\nFollow-ups  What remote services are we interacting with? How long are we interacting with them and how many invocations? How many times did we make calls and what threads were tied to those calls?  ","categories":"","description":"Take the next step in learning more with Flight Recorder","excerpt":"Take the next step in learning more with Flight Recorder","ref":"/docs/jmc/advanced/","tags":"","title":"Advanced Flight Recorder"},{"body":"Part 5: Garbage Collections In this workshop, we are going to do some analysis on the JVM in regards to it’s garbage collection (GC) cycles.\nPrerequisites  R environment (If you want to try parsing some of the logs)  Garbage Collection Logs A key piece to understanding what is happening in terms of GC cycles within your service, is enabling GC logs. In this section we will go over the JVM options you can enable on your service and how to interpret those logs.\nJVM Options  -XX:+PrintGCDetails: Includes more details within your GC log -XX:+PrintGCDateStamps: Have a readable date/time string to correlate events in your log. Without this option, your GC log will have elapsed time since the JVM was started. This format (which is reported) in seconds (with millisecond precision), is not easy for someone to quickly correlate when this event was logged (as you have to infer the time based on when the JVM was started). -Xloggc: Specifies the log file for the garbage collection logs (otherwise will go to stdout). :bulb: Note: -verbose:gc is NOT necessary when you set Xloggc (it is implied). -XX:+UseGCLogFileRotation: Support rotating your GC log file (you don’t want to let this get too big). -XX:GCLogFileSize: Size of the file for rotation (ex. 10M). -XX:NumberOfGCLogFiles: Number of GC log files to maintain (ex. 3). :bulb: Note: if you are monitoring your log file with another solution (like splunk or logstash), you typically don’t need to be keeping an inventory of rolled files around, unless you are concerned about log forwarding failing and want to ensure a given amount is still capable of being captured from a host.  GC Log formats With different garbage collectors in the JVM, you will get slightly different GC log formats.\nParralel GC 2015-09-30T10:57:20.215+0600: 0.847: [GC (Allocation Failure) [PSYoungGen: 65536K-\u003e10748K(76288K)] 65536K-\u003e12607K(251392K), 0.0118637 secs] [Times: user=0.03 sys=0.01, real=0.01 secs] 2015-09-30T10:57:20.556+0600: 1.188: [GC (Metadata GC Threshold) [PSYoungGen: 44312K-\u003e10748K(141824K)] 46171K-\u003e12786K(316928K), 0.0077755 secs] [Times: user=0.03 sys=0.00, real=0.01 secs] 2015-09-30T10:57:20.564+0600: 1.196: [Full GC (Metadata GC Threshold) [PSYoungGen: 10748K-\u003e0K(141824K)] [ParOldGen: 2038K-\u003e10444K(116736K)] 12786K-\u003e10444K(258560K), [Metaspace: 20976K-\u003e20976K(1067008K)], 0.0286381 secs] [Times: user=0.14 sys=0.01, real=0.03 secs] CMS 2015-09-30T11:11:35.994+0600: 0.838: [GC (Allocation Failure) 0.838: [ParNew: 69952K-\u003e8703K(78656K), 0.0128204 secs] 69952K-\u003e12781K(253440K), 0.0128848 secs] [Times: user=0.04 sys=0.01, real=0.01 secs] 2015-09-30T11:11:38.009+0600: 2.853: [GC (CMS Initial Mark) [1 CMS-initial-mark: 4077K(174784K)] 67493K(253440K), 0.0088311 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] 2015-09-30T11:11:38.018+0600: 2.862: [CMS-concurrent-mark-start] 2015-09-30T11:11:38.018+0600: 2.862: [CMS-concurrent-mark: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 2015-09-30T11:11:38.018+0600: 2.862: [CMS-concurrent-preclean-start] 2015-09-30T11:11:38.019+0600: 2.863: [CMS-concurrent-preclean: 0.001/0.001 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 2015-09-30T11:11:38.019+0600: 2.863: [CMS-concurrent-abortable-preclean-start] CMS: abort preclean due to time 2015-09-30T11:11:43.074+0600: 7.918: [CMS-concurrent-abortable-preclean: 1.233/5.055 secs] [Times: user=1.23 sys=0.01, real=5.06 secs] 2015-09-30T11:11:43.074+0600: 7.918: [GC (CMS Final Remark) [YG occupancy: 63415 K (78656 K)]7.918: [Rescan (parallel) , 0.0052614 secs]7.924: [weak refs processing, 0.0000337 secs]7.924: [class unloading, 0.0029068 secs]7.927: [scrub symbol table, 0.0025781 secs]7.929: [scrub string table, 0.0002699 secs][1 CMS-remark: 4077K(174784K)] 67493K(253440K), 0.0117740 secs] [Times: user=0.04 sys=0.01, real=0.01 secs] 2015-09-30T11:11:43.086+0600: 7.930: [CMS-concurrent-sweep-start] 2015-09-30T11:11:43.086+0600: 7.930: [CMS-concurrent-sweep: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 2015-09-30T11:11:43.087+0600: 7.930: [CMS-concurrent-reset-start] 2015-09-30T11:11:43.110+0600: 7.954: [CMS-concurrent-reset: 0.023/0.023 secs] [Times: user=0.01 sys=0.01, real=0.03 secs] G1 015-09-30T11:13:03.870+0600: 0.395: [GC pause (G1 Evacuation Pause) (young), 0.0052206 secs] [Parallel Time: 1.9 ms, GC Workers: 8] [GC Worker Start (ms): Min: 395.4, Avg: 395.5, Max: 395.8, Diff: 0.3] [Ext Root Scanning (ms): Min: 0.0, Avg: 0.3, Max: 1.1, Diff: 1.1, Sum: 2.0] [Update RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] [Processed Buffers: Min: 0, Avg: 0.0, Max: 0, Diff: 0, Sum: 0] [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1] [Code Root Scanning (ms): Min: 0.0, Avg: 0.1, Max: 0.4, Diff: 0.4, Sum: 0.5] [Object Copy (ms): Min: 0.7, Avg: 1.4, Max: 1.6, Diff: 0.9, Sum: 11.4] [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1] [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1] [GC Worker Total (ms): Min: 1.5, Avg: 1.8, Max: 1.8, Diff: 0.3, Sum: 14.2] [GC Worker End (ms): Min: 397.3, Avg: 397.3, Max: 397.3, Diff: 0.0] [Code Root Fixup: 0.1 ms] [Code Root Purge: 0.1 ms] [Clear CT: 0.1 ms] [Other: 3.0 ms] [Choose CSet: 0.0 ms] [Ref Proc: 2.7 ms] [Ref Enq: 0.0 ms] [Redirty Cards: 0.2 ms] [Humongous Reclaim: 0.0 ms] [Free CSet: 0.0 ms] [Eden: 24.0M(24.0M)-\u003e0.0B(39.0M) Survivors: 0.0B-\u003e3072.0K Heap: 24.0M(256.0M)-\u003e5754.5K(256.0M)] [Times: user=0.02 sys=0.01, real=0.00 secs] 2015-09-30T11:13:04.343+0600: 0.868: [GC pause (G1 Evacuation Pause) (young), 0.0082908 secs] [Parallel Time: 5.1 ms, GC Workers: 8] [GC Worker Start (ms): Min: 868.3, Avg: 868.4, Max: 868.8, Diff: 0.5] [Ext Root Scanning (ms): Min: 0.0, Avg: 0.3, Max: 1.7, Diff: 1.7, Sum: 2.7] [Update RS (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 0.5] [Processed Buffers: Min: 0, Avg: 0.4, Max: 1, Diff: 1, Sum: 3] [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1] [Code Root Scanning (ms): Min: 0.0, Avg: 0.4, Max: 1.4, Diff: 1.4, Sum: 3.5] [Object Copy (ms): Min: 3.2, Avg: 4.0, Max: 4.6, Diff: 1.4, Sum: 32.1] [Termination (ms): Min: 0.0, Avg: 0.1, Max: 0.1, Diff: 0.1, Sum: 0.6] [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1] [GC Worker Total (ms): Min: 4.6, Avg: 4.9, Max: 5.0, Diff: 0.5, Sum: 39.5] [GC Worker End (ms): Min: 873.3, Avg: 873.3, Max: 873.4, Diff: 0.0] [Code Root Fixup: 0.3 ms] [Code Root Purge: 0.1 ms] [Clear CT: 0.1 ms] [Other: 2.7 ms] [Choose CSet: 0.0 ms] [Ref Proc: 2.4 ms] [Ref Enq: 0.0 ms] [Redirty Cards: 0.1 ms] [Humongous Reclaim: 0.0 ms] [Free CSet: 0.1 ms] [Eden: 39.0M(39.0M)-\u003e0.0B(147.0M) Survivors: 3072.0K-\u003e6144.0K Heap: 44.6M(256.0M)-\u003e13.9M(256.0M)] [Times: user=0.04 sys=0.00, real=0.01 secs] 2015-09-30T11:13:04.650+0600: 1.176: [GC pause (Metadata GC Threshold) (young) (initial-mark), 0.0090083 secs] [Parallel Time: 5.5 ms, GC Workers: 8] [GC Worker Start (ms): Min: 1175.9, Avg: 1176.0, Max: 1176.0, Diff: 0.1] [Ext Root Scanning (ms): Min: 1.1, Avg: 1.2, Max: 1.4, Diff: 0.3, Sum: 9.4] [Update RS (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 1.2] [Processed Buffers: Min: 0, Avg: 1.1, Max: 2, Diff: 2, Sum: 9] [Scan RS (ms): Min: 0.1, Avg: 0.1, Max: 0.3, Diff: 0.2, Sum: 1.1] [Code Root Scanning (ms): Min: 0.0, Avg: 0.2, Max: 0.5, Diff: 0.5, Sum: 2.0] [Object Copy (ms): Min: 3.4, Avg: 3.7, Max: 3.8, Diff: 0.4, Sum: 29.3] [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0] [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.2] [GC Worker Total (ms): Min: 5.4, Avg: 5.4, Max: 5.5, Diff: 0.1, Sum: 43.3] [GC Worker End (ms): Min: 1181.4, Avg: 1181.4, Max: 1181.4, Diff: 0.0] [Code Root Fixup: 0.3 ms] [Code Root Purge: 0.0 ms] [Clear CT: 0.1 ms] [Other: 3.0 ms] [Choose CSet: 0.0 ms] [Ref Proc: 2.7 ms] [Ref Enq: 0.0 ms] [Redirty Cards: 0.1 ms] [Humongous Reclaim: 0.0 ms] [Free CSet: 0.1 ms] [Eden: 33.0M(147.0M)-\u003e0.0B(140.0M) Survivors: 6144.0K-\u003e13.0M Heap: 46.9M(256.0M)-\u003e20.9M(256.0M)] [Times: user=0.04 sys=0.00, real=0.01 secs] 2015-09-30T11:13:04.660+0600: 1.185: [GC concurrent-root-region-scan-start] 2015-09-30T11:13:04.664+0600: 1.190: [GC concurrent-root-region-scan-end, 0.0046509 secs] 2015-09-30T11:13:04.664+0600: 1.190: [GC concurrent-mark-start] 2015-09-30T11:13:04.665+0600: 1.190: [GC concurrent-mark-end, 0.0007287 secs] 2015-09-30T11:13:04.665+0600: 1.190: [GC remark 1.190: [Finalize Marking, 0.0001736 secs] 1.191: [GC ref-proc, 0.0000411 secs] 1.191: [Unloading, 0.0016740 secs], 0.0020377 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 2015-09-30T11:13:04.667+0600: 1.193: [GC cleanup 21M-\u003e14M(256M), 0.0004254 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] Type of Collections A simple rule to watch for on your logs is the prefix of either:\n[GC ... \u003c- Minor GC cycle (young gen) [Full GC ... \u003c- Full GC cycle (:exclamation:) Explicit GCs can also be identified, which is when something is invoking the System.gc() API. Note, this is not good thing, as something is forcing a GC cycle to occur, rather than letting the JVM trigger this on its own (what should naturally occur).\n2015-09-30T12:23:44.425+0600: 195.699: [GC (System.gc()) [PSYoungGen: 39223K-\u003e3562K(76288K)] 49685K-\u003e14032K(190464K), 0.0047880 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 2015-09-30T12:23:44.430+0600: 195.704: [Full GC (System.gc()) [PSYoungGen: 3562K-\u003e0K(76288K)] [ParOldGen: 10469K-\u003e9174K(114176K)] 14032K-\u003e9174K(190464K), [Metaspace: 25137K-\u003e25137K(1071104K)], 0.0724521 secs] [Times: user=0.38 sys=0.01, real=0.07 secs] It is generally recommended to use the -XX:+DisableExplicitGC JVM option to disable forceful GC events. This will allow the JVM to still have garbage collections, but it disables them from being triggered explicitly. The description of this option:\n By default calls to System.gc() are enabled (-XX:-DisableExplicitGC). Use -XX:+DisableExplicitGC to disable calls to System.gc(). Note that the JVM still performs garbage collection when necessary.\n Enabling GC logging With our service, let’s go ahead and start it up with GC logging enabled:\n# Navigate to the root directory of this project java -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:gc.log -XX:GCLogFileSize=5M -XX:NumberOfGCLogFiles=2 \\  -jar java-perf-workshop-server/target/java-perf-workshop-server-1.1.0-SNAPSHOT.jar server server.yml Parsing the log For parsing the logs, we are just going to show a simple approach using R to parse the gc.log that we created. To do this, we will use the stringr package.\n# Including stringr package for regex library(stringr) # Navigating to where the project is at on my filesystem setwd(\"~/java-perf-workshop\") # Read the GC log file in gc \u003c- readLines(\"gc.log\") # Regex the matches matches \u003c- str_match(gc, \"(\\\\d+)K-\u003e(\\\\d+)K\\\\((\\\\d+)K\\\\),\\\\s(\\\\d+.\\\\d+)\\\\ssecs.*\\\\[Times\\\\: user=(\\\\d+.\\\\d+) sys=(\\\\d+.\\\\d+), real=(\\\\d+.\\\\d+) secs\") # Look at what matches, now we want to filter out the NA matches # Filter content out and convert to a data frame gc.df \u003c- data.frame(na.omit(matches[,-1]), stringsAsFactors=FALSE) # Add a column header to describe fields colnames(gc.df) \u003c- c(\"HeapUsedBeforeGC_KB\",\"HeapUsedAfterGC_KB\", \"HeapCapacity_KB\", \"GCPauseTime_Sec\", \"GCUserTime_Sec\", \"GCSysTime_Sec\", \"GCRealTime_Sec\") # List out the contents of the data frame gc.df Example output:\n HeapUsedBeforeGC_KB HeapUsedAfterGC_KB HeapCapacity_KB GCPauseTime_Sec GCUserTime_Sec GCSysTime_Sec GCRealTime_Sec 1 65536 12554 251392 0.0091645 0.03 0.01 0.01 2 45883 12707 316928 0.0092271 0.03 0.01 0.01 Reminder on the types of time being collected:\n GCUserTime_Sec: User space time GCSysTime_Sec: Kernel space time (operating system) GCRealTime_Sec: Complete time taken  Notice that the GCRealTime_Sec should closely align with the GCPauseTime_Sec value (just rounded up). If you notice that the GCUserTime_Sec is much larger than the GCRealTime_Sec, you can conclude that multiple threads are executing garbage collection, as GCUserTime_Sec is just the sum time of all the threads.\nGC Easy There’s an existing tool GC Easy which will do GC log parsing and analysis as well.\n","categories":"","description":"Analyzing garbage collections of the JVM","excerpt":"Analyzing garbage collections of the JVM","ref":"/docs/memory/gc/","tags":"","title":"Garbage Collections"},{"body":"In this workshop, we will be getting more familiar with using Java Mission Control and the Flight Recorder. As we have been running our service, we want to gather more insight of the code in the service by running series of simple tests and measuring the service.\n","categories":"","description":"Initial look at the JVM from its native perspective.\n","excerpt":"Initial look at the JVM from its native perspective.\n","ref":"/docs/jmc/","tags":"","title":"Java Mission Control \u0026 Flight Recorder"},{"body":"","categories":"","description":"Analyzing the JVM heap with available tooling.","excerpt":"Analyzing the JVM heap with available tooling.","ref":"/docs/memory/","tags":"","title":"Memory Analysis"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_1941820_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hu3d03a01dcc18bc5be0e67db3d8d209a6_1941820_1920x1080_fill_q75_catmullrom_top.jpg); } }  Understand how your JVM works. Get Started   Download   An open-source guide that steps through how to use open-source tooling to inspect and troubleshoot the performance of your Java applications.\n         This workshop focuses on taking an example Java web service, which performs suboptimally, and explores its behavior with open source tooling. This workshop is intended to empower developers with essential skills of measuring how the an application in the JVM performs. While this can become an advanced topic for tuning application, this workshop focuses on simple approaches with free available tooling.\n      Basics with OS, processes, and thread Start with basic knowledge of how to assess your Java application from the perspective of the operating system with processes, threads, and system calls.\nRead more …\n   Java Mission Control Learn how to levarage Java Mission Control with Flight Recorder to get insight into your running application.\nRead more …\n   Memory Analysis Learn how to explore the memory utilized in your Java application. This includes how to enable and explore the garbage collection logs.\nRead more …\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","tags":"","title":"jvmperf"}]